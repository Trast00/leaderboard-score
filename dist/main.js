"use strict";(self.webpackChunkleaderboard_score=self.webpackChunkleaderboard_score||[]).push([[179],{426:(n,e,r)=>{r.d(e,{Z:()=>i});var t=r(537),s=r.n(t),o=r(645),a=r.n(o)()(s());a.push([n.id,'* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n  font-family: "Inter var", sans-serif;\r\n}\r\n\r\nbody {\r\n  padding: 48px;\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  flex-wrap: wrap;\r\n}\r\n\r\nh1 {\r\n  width: 100%;\r\n  font-size: 3rem;\r\n  margin-bottom: 48px;\r\n}\r\n\r\nh2 {\r\n  font-size: 2rem;\r\n  margin-bottom: 24px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n\r\n/* Recent score */\r\n.recent-scores {\r\n  width: 50%;\r\n}\r\n\r\n#reset-list-scores {\r\n  height: 40px;\r\n  margin-left: 8px;\r\n  padding: 8px 12px 8px 12px;\r\n}\r\n\r\n.list-scores {\r\n  list-style: none;\r\n  border: 1px solid #d3d3d3;\r\n  width: 100%;\r\n}\r\n\r\n.list-scores :nth-child(even) {\r\n  background-color: #f3f3f3;\r\n}\r\n\r\n.score {\r\n  padding: 6px 12px 6px 16px;\r\n}\r\n\r\n/* Form: Add new score */\r\n.new-score {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 30%;\r\n}\r\n\r\n.new-score label {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.new-score input {\r\n  width: 100%;\r\n  padding: 8px 12px 8px 12px;\r\n  border: 1px solid #d3d3d3;\r\n}\r\n\r\n.new-score button {\r\n  width: 100px;\r\n  height: 40px;\r\n  align-self: flex-end;\r\n}\r\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;EACV,sBAAsB;EACtB,oCAAoC;AACtC;;AAEA;EACE,aAAa;EACb,aAAa;EACb,6BAA6B;EAC7B,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,eAAe;EACf,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,mBAAmB;EACnB,aAAa;EACb,8BAA8B;AAChC;;AAEA,iBAAiB;AACjB;EACE,UAAU;AACZ;;AAEA;EACE,YAAY;EACZ,gBAAgB;EAChB,0BAA0B;AAC5B;;AAEA;EACE,gBAAgB;EAChB,yBAAyB;EACzB,WAAW;AACb;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,0BAA0B;AAC5B;;AAEA,wBAAwB;AACxB;EACE,aAAa;EACb,sBAAsB;EACtB,UAAU;AACZ;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,0BAA0B;EAC1B,yBAAyB;AAC3B;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,oBAAoB;AACtB",sourcesContent:['* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n  font-family: "Inter var", sans-serif;\r\n}\r\n\r\nbody {\r\n  padding: 48px;\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  flex-wrap: wrap;\r\n}\r\n\r\nh1 {\r\n  width: 100%;\r\n  font-size: 3rem;\r\n  margin-bottom: 48px;\r\n}\r\n\r\nh2 {\r\n  font-size: 2rem;\r\n  margin-bottom: 24px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n\r\n/* Recent score */\r\n.recent-scores {\r\n  width: 50%;\r\n}\r\n\r\n#reset-list-scores {\r\n  height: 40px;\r\n  margin-left: 8px;\r\n  padding: 8px 12px 8px 12px;\r\n}\r\n\r\n.list-scores {\r\n  list-style: none;\r\n  border: 1px solid #d3d3d3;\r\n  width: 100%;\r\n}\r\n\r\n.list-scores :nth-child(even) {\r\n  background-color: #f3f3f3;\r\n}\r\n\r\n.score {\r\n  padding: 6px 12px 6px 16px;\r\n}\r\n\r\n/* Form: Add new score */\r\n.new-score {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 30%;\r\n}\r\n\r\n.new-score label {\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.new-score input {\r\n  width: 100%;\r\n  padding: 8px 12px 8px 12px;\r\n  border: 1px solid #d3d3d3;\r\n}\r\n\r\n.new-score button {\r\n  width: 100px;\r\n  height: 40px;\r\n  align-self: flex-end;\r\n}\r\n'],sourceRoot:""}]);const i=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r="",t=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),t&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=n(e),t&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(n,r,t,s,o){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(t)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(a[c]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);t&&a[A[0]]||(void 0!==o&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=o),r&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=r):A[2]=r),s&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=s):A[4]="".concat(s)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],r=n[3];if(!r)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(s," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function r(n){for(var r=-1,t=0;t<e.length;t++)if(e[t].identifier===n){r=t;break}return r}function t(n,t){for(var o={},a=[],i=0;i<n.length;i++){var c=n[i],l=t.base?c[0]+t.base:c[0],A=o[l]||0,d="".concat(l," ").concat(A);o[l]=A+1;var p=r(d),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var f=s(u,t);t.byIndex=i,e.splice(i,0,{identifier:d,updater:f,references:1})}a.push(d)}return a}function s(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;r.update(n=e)}else r.remove()}}n.exports=function(n,s){var o=t(n=n||[],s=s||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var i=r(o[a]);e[i].references--}for(var c=t(n,s),l=0;l<o.length;l++){var A=r(o[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}o=c}}},569:n=>{var e={};n.exports=function(n,r){var t=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,r)=>{n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var s=void 0!==r.layer;s&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,s&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},716:(n,e,r)=>{var t=r(379),s=r.n(t),o=r(795),a=r.n(o),i=r(569),c=r.n(i),l=r(565),A=r.n(l),d=r(216),p=r.n(d),u=r(589),f=r.n(u),h=r(426),m={};m.styleTagTransform=f(),m.setAttributes=A(),m.insert=c().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=p(),s()(h.Z,m),h.Z&&h.Z.locals&&h.Z.locals;const g=document.forms[0],x=document.getElementById("reset-list-scores"),E=new class{constructor(){this.url="https://us-central1-js-capstone-backend.cloudfunctions.net/api/games/",this.gameID="qJy8HJSS4vFuYrw4yTid",this.gameUrl="https://us-central1-js-capstone-backend.cloudfunctions.net/api/games/qJy8HJSS4vFuYrw4yTid/scores/",this.list=[]}create=async n=>{console.log("start creating game at: ",this.url),await fetch(this.url,{method:"POST",mode:"cors",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:n})}).then((n=>{console.log("respone:",n),n.ok?n.json().then((n=>console.log(n.result))):console.log("Some gone wrong!")}))};addScore=async(n,e)=>{console.log("data",JSON.stringify({user:n,score:e})),await fetch(this.gameUrl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({user:n,score:e})}).then((n=>n.ok))};getScores=async()=>(console.log("start getting List"),(await fetch(this.gameUrl)).json())},y=new class{constructor(){this.list=[]}add=(n,e)=>{const r={value:e,name:n};this.list.push(r),this.list=this.list.sort(((n,e)=>e.value-n.value));const t=this.list.indexOf(r);this.display(r,t)};display=(n,e=this.list.length)=>{const r=document.createElement("li");r.classList.add("score"),r.textContent=`${n.name}: ${n.value}`;const t=document.getElementById("list-scores");if(e===this.list.length)return void t.append(r);let s=e,o=t.firstChild;for(;0!==s;)o=o.nextSibling,s-=1;t.insertBefore(r,o)};reset=()=>{this.list=[],document.getElementById("list-scores").innerHTML=""}};g.addEventListener("submit",(n=>{n.preventDefault(),0!==g.name.value.length&&0!==g.score.value.length&&(E.addScore(g.name.value,parseInt(g.score.value)),y.add(g.name.value,parseInt(g.score.value)))})),x.addEventListener("click",(async()=>{(await E.getScores()).result.forEach((n=>{y.add(n.user,n.score)}))})),window.addEventListener("load",(async()=>{x.click()}))}},n=>{n(n.s=716)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,